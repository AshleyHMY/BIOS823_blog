{
  
    
        "post0": {
            "title": "Biostat823 Assignment1",
            "content": "Biostat 823 assignment1-math is fun Ashley Hu . This assignment can also be found in my blog named Biostat 823 Assignment1. . The link for github repo is :https://github.com/AshleyHMY/BIOS823_blog . Q1 By listing the first six prime numbers 2,3,5,7,11 and 13, we can see that the 6th prime is 13. What is the 10001st prime number? (answered by 424,641 people) . n = 10001 prime_numbers = [2,3] i = 3 if (0&lt;n&lt;3): print(n, &#39;th prime number is:&#39;, prime_numbers[n-1]) elif(n&gt;2): while(True): i+=1 flag = False for j in range(2, int(i/2)+1): if (i%j==0): # i is not a prime number if i%j==0. Only need to check the first half of i. flag = True break if (flag==False): prime_numbers.append(i) if(len(prime_numbers)==n): break print(n, &#39;th prime number is:&#39;, prime_numbers[n-1]) else: print(&#39;Please enter a valid number&#39;) . 10001 th prime number is: 104743 . Explanation for Q1: In this question I want to find the 10001st prime number let n = 10001. I created a list called prime_numbers that includes the first two prime number 2 and 3. In the first if statement when n=1 the first prime number is 2 and n=2 the second prime number is 3. I added more elements(prime numbers) to the prime_numbers list. Then I want to check if integers greater than 3 is a prime. First let i=4 and I want to check if 4 is a prime using the for loop (for j in range(2, 3). Here I used int(i/2)+1 to reduce calculation (eg, 10=2x5, if 10 can be divded by 2, we can conclude 10 is not a prime, do not need to check if 10 can be divided by 5 again). If 4 can be divided by 2 or 3, flag will be equal to True and 4 will not be added to the prime_numbers list. Then let i=5 and run the for loop (for j in range(2, 3)). 5 cannot be divided by 2 or 3, thus, 5 is a prime number and 5 is the third element in the prime_numbers list. The code will print &quot;3th prime number is 5. let n=10001, the code will give the 10001th prime number. . Q2, The prime 41, can be written as the sum of six consecutive primes: 41=2+3+5+7+11+13 This is the longest sum of consecutive primes that adds to a prime below one-hundred. The longest sum of consecutive primes below one-thousand that adds to aprime, contains 21 terms, and is equal to 953. Which prime below one million can be written as the sum of the most consecutive primes?(Solved by 62,918 people) . import sympy sum=0 num_lst = [] sum_lst = [] prime_sum_lst = [] limit = 1000000 for num in range(1,limit): if sympy.isprime(num) is True: sum+=num num_lst.append(num) sum_lst.append(sum) for sum in sum_lst: if sum&lt;limit: if sympy.isprime(sum)==True: prime_sum_lst.append(sum) max_sum = max(prime_sum_lst) index = sum_lst.index(max_sum)+1 print(&quot;The required answer is :&quot;, max_sum, &#39;contains&#39;, index, &#39;items&#39;) . The required answer is : 958577 contains 536 items . Explanation for Q2: I use the function isprime from numpy. First, I created a list called num_lst that contains all elements below 1,000,000. I select all prime numbers from 1 to 1,000,000. The sum_lst list contains all possible consecutive sum(eg, 2,5,10,17,28,41). The second for loop select all possible sum betlow 1,000,000 that is a prime number. The prime_sum_lst includes elements (eg, 2,5,17,41). Use the mac() function to select the largest element in prime_sum_lst list. Then, use the index function to get position of max_sum in the sum_lst that is equal to the number of elements in this max_sum. . Q3, The smallest number expressible as the sum of a prime square, prime cube, and prime fourth power is 28. In fact, there are exactly four numbers below fifty that can be expressed in such a way: 28 = 2^2 + 2^3 + 2^4 33 = 3^2 + 2^3 + 2^4 How many numbers below fifty million can be expressed as the sum of a prime square, prime cube, and prime fourth power? (solved by 20805 people) . import numpy as np limit = 50000000 max_prime = int(limit**0.5) #All possible prime numbers should be smaller than the square root of fifty million. prime_sum = [] #To get a list of prime numbers below max_prime using for loop for num in range(2, max_prime): if sympy.isprime(num) is True: num_prime.append(num) for prime3 in num_prime: prime_forth_power = prime3**4 if prime_forth_power &gt; limit: break for prime2 in num_prime: prime_third_forth = prime2**3 + prime_forth_power if prime_third_forth &gt; limit: break for prime1 in num_prime: sum_power = prime1**2 + prime_third_forth if sum_power &gt; limit: break prime_sum.append(sum_power) def unique(list): &quot;&quot;&quot;This unique function selects unique elements in the prime_sum list generated from the above for loop&quot;&quot;&quot; x = np.array(list) unique_lst = np.unique(x) return unique_lst result = len(unique(prime_sum)) result . 1097343 . Explanation for Q3: First use an expression num = a^2+b^2+c^2. a should be smaller than the square root of fifty million. If a^2 is greater than fifty million, this number should not be included in the expression. The max_prime is the maximum number that can be included in the expression. The num_prime includes all primes that can be used in the expression. The for loop selects numbers consists of a prime square, a prime cube and a prime fourth for prime numbers between 2 and max_prime. There are duplicate numbers in the prime_sum list. I create a function called unique() to select unique values in the prime_sum list. The &quot;result&quot; represents the number of unique elements int eh prime_sum list. &quot;result&quot; equals to the number of numbers below fifty million that can be expressed as the sum of a prime square, prime cube and prime fourth power. .",
            "url": "https://ashleyhmy.github.io/BIOS823_blog/2021/09/03/823-Assignment1.html",
            "relUrl": "/2021/09/03/823-Assignment1.html",
            "date": " • Sep 3, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ashleyhmy.github.io/BIOS823_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ashleyhmy.github.io/BIOS823_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ashleyhmy.github.io/BIOS823_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ashleyhmy.github.io/BIOS823_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}